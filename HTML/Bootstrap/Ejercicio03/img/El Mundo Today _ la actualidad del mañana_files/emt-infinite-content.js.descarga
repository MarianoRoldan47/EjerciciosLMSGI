(function ($) {

	class InfiniteContent {
		constructor(config) {
			let options = this.options = {
				$container: null,			// Mandatory, must be a jQuery object with a length of 1.
				url: null,					// Mandatory, must be a function or a string.
				afterContentInsertion: null,// Hook executed after the content has been inserted.
				processData: null,			// Hook executed after the data is received, before being inserted.
				toleranceBottom: 200,
				toleranceTop: 0
			};
			Object.assign(options, config);
			this.isLoading = false;
			this.lastSuccessfulUrl = null;

			if (
				$.isFunction(options.url) !== true
				&& typeof options.url !== 'string'
			) {
				throw new Error('Wrong url in InfiniteContent constructor!');
			}

			if (
				!options.$container
				|| options.$container.length !== 1
			) {
				throw new Error('Wrong container in InfiniteContent constructor!');
			}

			// Bind events:
			this.handleScroll = this.handleScroll.bind(this);
			this.loadSuccess = this.loadSuccess.bind(this);

			$(document).on('scroll', this.handleScroll);
		}

		handleScroll() {
			const options = this.options,
				currentScroll = document.scrollingElement.scrollTop + window.innerHeight,
				elementOffsetBottom = options.$container.offset().top + options.$container.height(),
				url = this.buildContentUrl();
			if (
				this.isLoading === false
				&& !!url
				&& url !== this.lastSuccessfulUrl
				&& currentScroll > (elementOffsetBottom + options.toleranceTop)
				&& currentScroll < (elementOffsetBottom + options.toleranceBottom)
			) {
				this.isLoading = true;
				this.lastSuccessfulUrl = url;
				$.ajax(url, {
					dataType: 'html',
					method: 'GET',
					success: this.loadSuccess
				});
			}
		}

		loadSuccess(data) {
			const options = this.options

			if ($.isFunction(options.processData)) {
				data = options.processData(data);
			}

			let $newContent = $(data);

			$newContent.addClass('infinite-content');
			$newContent.appendTo(options.$container);

			if ($.isFunction(options.afterContentInsertion)) {
				options.afterContentInsertion($newContent);
			}

			this.isLoading = false;
		}

		buildContentUrl() {
			const url = this.options.url
			return ($.isFunction(url) ? url() : url);
		}
	}

	window.InfiniteContent = InfiniteContent;

})(jQuery);

